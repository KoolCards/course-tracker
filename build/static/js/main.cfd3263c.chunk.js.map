{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","crn","term","checked","formLabelValue","submitForm","data","FormData","append","_this","fetch","method","body","then","result","console","log","text","resText","alert","error","crnchange","e","setState","target","value","termchange","switchChange","classes","this","props","react_default","a","createElement","className","Typography_default","variant","noWrap","title","TextField_default","label","defaultValue","onChange","crninput","termInput","submitButton","Button_default","color","onClick","FormControlLabel_default","formLabel","control","Switch_default","Component","withStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","Object","objectSpread","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","concat","enteringScreen","marginTop","spacing","unit","menuButtonHidden","flexGrow","marginBottom","drawerPaper","position","whiteSpace","drawerPaperClose","defineProperty","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","chartContainer","tableContainer","h3","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfd3263c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport './App.css';\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    submitButton: {\n        marginTop: theme.spacing.unit * 2\n    },\n    crninput: {\n        marginTop: theme.spacing.unit * 2\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n        marginBottom: theme.spacing.unit * 2,\n        marginTop: theme.spacing.unit\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing.unit * 7,\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing.unit * 9,\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing.unit * 3,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    chartContainer: {\n        marginLeft: -22,\n    },\n    tableContainer: {\n        height: 320,\n    },\n    h3: {\n        marginBottom: theme.spacing.unit * 2,\n    },\n    termInput: {\n        marginTop: theme.spacing.unit * 2,\n        marginLeft: theme.spacing.unit\n    },\n    formLabel: {\n        marginLeft: theme.spacing.unit\n    }\n});\n\nclass App extends Component{\n\n    state = {\n        crn: \"83870\",\n        term: \"201908\",\n        checked: true,\n        formLabelValue: \"Add Courses\"\n    };\n\n    submitForm = () => {\n        const data = new FormData();\n        data.append('crn', this.state.crn)\n        data.append('term', this.state.term)\n        data.append('track', this.state.checked)\n\n        fetch(\"/submit\", {\n            method: 'POST',\n            body: data\n        }).then(\n            (result) => {\n                console.log(result.text().then(function(resText) {\n                    alert(resText)\n                }))\n            },\n            (error) => {\n            }\n        )\n    }\n\n    crnchange = (e) => {\n        this.setState({crn: e.target.value})\n    }\n\n    termchange = (e) => {\n        this.setState({term: e.target.value})\n    }\n\n    switchChange = (e) => {\n        this.setState({checked: e.target.checked})\n        if (e.target.checked) {\n            this.setState({formLabelValue: \"Track Courses\"})\n        } else {\n            this.setState({formLabelValue: \"Untrack Courses\"})\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div className=\"App\">\n                <Typography variant=\"h3\" noWrap className={classes.title}>\n                    GT Course Tracker\n                </Typography>\n\n                <div className=\"inputData\">\n                    <TextField label=\"CRN: \" defaultValue=\"83870\" onChange={this.crnchange} className={classes.crninput} variant=\"outlined\"></TextField>\n                    <TextField label=\"Term: \" defaultValue=\"201908\" onChange={this.termchange} className={classes.termInput} variant=\"outlined\"></TextField>\n                </div>\n\n                <div className={classes.submitButton}>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.submitForm}>\n                        Submit Form\n                    </Button>\n                    <FormControlLabel className={classes.formLabel} control={<Switch checked={this.state.checked} onChange={this.switchChange}/>} label={this.state.formLabelValue}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}