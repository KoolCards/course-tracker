{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","submitForm","data","FormData","append","_this","state","crn","term","fetch","method","body","then","result","console","log","text","resText","alert","error","crnchange","e","setState","target","value","termchange","react_default","a","createElement","className","Typography_default","variant","noWrap","Input_default","onChange","this","Button_default","color","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAgEeA,oNAxDXC,WAAa,WACT,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,MAAOC,EAAKC,MAAMC,KAC9BL,EAAKE,OAAO,OAAQC,EAAKC,MAAME,MAE/BC,MAAM,UAAW,CACbC,OAAQ,OACRC,KAAMT,IACPU,KACC,SAACC,GACGC,QAAQC,IAAIF,EAAOG,OAAOJ,KAAK,SAASK,GACpCC,MAAMD,OAGd,SAACE,SAKTC,UAAY,SAACC,GACThB,EAAKiB,SAAS,CAACf,IAAKc,EAAEE,OAAOC,WAGjCC,WAAa,SAACJ,GACVhB,EAAKiB,SAAS,CAACd,KAAMa,EAAEE,OAAOC,iFAI9B,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYI,QAAQ,KAAKC,QAAM,GAA/B,+BAIAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYI,QAAQ,KAAKC,QAAM,GAA/B,OAEIN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAOO,SAAUC,KAAKf,UAAWS,UAAU,QAAQE,QAAQ,eAGnEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYI,QAAQ,KAAKC,QAAM,GAA/B,QAEIN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAOO,SAAUC,KAAKV,WAAYI,UAAU,QAAQE,QAAQ,eAGpEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQI,QAAQ,YAAYM,MAAM,UAAUC,QAASH,KAAKlC,YAA1D,wBAjDFsC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.ccbea4fa.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\n\nclass App extends Component{\n\n    submitForm = () => {\n        const data = new FormData();\n        data.append('crn', this.state.crn)\n        data.append('term', this.state.term)\n\n        fetch(\"/submit\", {\n            method: 'POST',\n            body: data\n        }).then(\n            (result) => {\n                console.log(result.text().then(function(resText) {\n                    alert(resText)\n                }))\n            },\n            (error) => {\n            }\n        )\n    }\n\n    crnchange = (e) => {\n        this.setState({crn: e.target.value})\n    }\n\n    termchange = (e) => {\n        this.setState({term: e.target.value})\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Typography variant=\"h4\" noWrap>\n                    Enter Classes to Be Tracked\n                </Typography>\n\n                <div className=\"crnInput\">\n                    <Typography variant=\"h6\" noWrap>\n                        CRN:\n                        <Input onChange={this.crnchange} className=\"data1\" variant=\"outlined\"></Input>\n                    </Typography>\n                </div>\n                <div className=\"termInput\">\n                    <Typography variant=\"h6\" noWrap>\n                        Term:\n                        <Input onChange={this.termchange} className=\"data1\" variant=\"outlined\"></Input>\n                    </Typography>\n                </div>\n                <div className=\"submit\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.submitForm}>\n                        Submit Form\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}